// Generated by CoffeeScript 1.3.3
/*
NavigationBarView
@author Josh Bass
*/

define(["vendor/backbone", "plugins/CustomerSection/model/CustomerSectionModel", "plugins/CustomerSection/view/CustomerSectionView", "plugins/NavigationBar/view/Templates", 'css!plugins/NavigationBar/view/res/css/navigationBar.css'], function(Backbone, CustomerSectionModel, CustomerSectionView, Templates, CSS) {
  return Backbone.View.extend({
    className: "navigationBar pressedBorder",
    events: {
      "click .expandButton": "toggleNavBarExpand",
      "click .section": "selectView"
    },
    initialize: function(model) {
      this.navBarExpanded = true;
      console.log("hey the nav bar is initialized");
      this.customerSectionModel = new CustomerSectionModel();
      this.customerSectionView = new CustomerSectionView({
        model: this.customerSectionModel
      });
      return this.currentView = this.customerSectionView;
    },
    /*
    		Create the Dialog and return its element
    		@method render
    */

    render: function() {
      this.customerSectionView.render();
      this.$el.html(Templates.NavigationBar());
      console.log(this.currentView);
      this.model.get("mainElement").append(this.currentView.$el);
      this.currentView.realized();
      return this.$el;
    },
    /*
    		Called after Dialog has been appended, this will set up the prog search
    		list with all known searches
    		@method realized
    */

    realized: function() {},
    toggleNavBarExpand: function() {
      this.navBarExpanded = !this.navBarExpanded;
      if (this.navBarExpanded) {
        this.$el.css("width", "15%");
        this.currentView.$el.css("width", "85%");
        this.$el.find(".navBarLabel").css("display", "");
        return this.$el.find(".section").css("display", "");
      } else {
        this.$el.css("width", "1%");
        this.currentView.$el.css("width", "99%");
        this.$el.find(".navBarLabel").css("display", "none");
        return this.$el.find(".section").css("display", "none");
      }
    },
    selectView: function(event) {
      var _this = this;
      this.currentView.$el.removeClass("widthTransition");
      return this.currentView.$el.toggle("blind", {}, 500, function() {
        console.log("done folding now open new view");
        _this.currentView.$el.addClass("widthTransition");
        console.log("the event is ");
        return console.log(event);
      });
    },
    loadNewView: function(viewName) {
      return console.log("loading up a new view...");
    }
  });
});
